{
  "hash": "05bd7b83a01b8ceddb1cab3edce809db",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using gander and ellmer\"\nauthor: \"Arvind V\"\ndate: \"2025-06-14\"\norder: 10\ndate-modified: \"June, 14, 2025\"\ncategories: [news, code, analysis]\n---\n\n## Introduction\n\nI am going to use `gander` to create a simple example of how to use it.\nIt seems `gander` can allow the user to **see the data** they are\nworking with and is able to generate accurate R code for graphs.\n\n## Setting Up R Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggformula)\nlibrary(gander)\nlibrary(ellmer)\n```\n:::\n\n\n## Setting up `gander` and `ellmer`\n\nThere are a few steps involved in setting up `gander` and `ellmer` to\nwork with your preferred LLM (Large Language Model) service. The steps\nare as follows:\n\n1.  Install the `gander` and `ellmer` packages.\n2.  Get your API Key, from say Anthropic, ChatGPT, or Ollama.\\\n\n-   Anthropic: visit <https://console.anthropic.com/settings/keys>\n-   ChatGPT: visit <https://platform.openai.com/api-keys>\n-   Ollama: visit <https://ollama.com/> \\# runs LLMs LOCALLY! NO API Key\n    needed.\n\nSee “Choosing a model” in vignette(\"gander\", package = \"gander\") to\nlearn more.\n\n3.  Save the `API_KEY` of you preferred LLM service in your `.Rprofile`\n    file. For example, if you are using Ollama, you would add the\n    following line to your `.Rprofile`, as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## RUN THESE IN YOUR CONSOLE\ninstall.packages(\"usethis\")\nlibrary(usethis)\nusethis::edit_r_profile()\n```\n:::\n\n\nThis will open the `.Rprofile` file in your RStudio editor. You will\nneed to add (one of ) the following lines to the file:\n\nOPENAI_API_KEY = \"YOUR_API_KEY_HERE\"\\\\ ANTHROPIC_API_KEY =\n\"YOUR_API_KEY_HERE\" etc.\n\n4.  Also add one of these line to the `.Rprofile` file:\n\n`options(.gander_chat = ellmer::chat_anthropic())`\n\n5.  If you wish to run models locally for free, you can use Ollama. In\n    that case, you will need to:\n\n-   install the Ollama CLI <https://ollama.com/download>\n-   download a model from <https://ollama.com/models>, say \"llama3.1\"\n-   then add the following line to your `.Rprofile` file:\n    `options(.gander_chat = ellmer::chat_ollama(model = \"llama3.1\"))`\n-   MacOS: Ensure you start `ollama` server by running `ollama serve` in\n    your terminal.\n-   Windows: Add ollama.exe to your startup programs\n\n6.  Setup the `gander` assistant: The `gander` assistant is interfaced\n    with the via the `gander addin`. For easiest access, we recommend\n    registering the `gander addin` to a keyboard shortcut.\n\nIn RStudio, navigate to\n`Tools > Modify Keyboard Shortcuts > Search \"gander\"`. The package\nauthor suggests `Ctrl+Alt+G` (or `Ctrl+Cmd+G` on macOS).\n\n7.  Restart RStudio to ensure the changes take effect.\n\n## Using `gander`\n\nThe `gander` package speaks with `ellmer` to \"speak with an LLM\". Hence\nthere is a small amount of setup required for `gander` to deliver its\ngoods.\n\nAs per @ref1, let us use the `stackoverflow` data from the `modeldata`\npackage to create our graphs.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"stackoverflow\", package = \"modeldata\")\nstackoverflow\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,594 × 21\n   Country        Salary YearsCodedJob OpenSource Hobby CompanySizeNumber Remote\n   <fct>           <dbl>         <int>      <dbl> <dbl>             <dbl> <fct> \n 1 United Kingdom 1   e5            20          0     1              5000 Remote\n 2 United States  1.3 e5            20          1     1              1000 Remote\n 3 United States  1.75e5            16          0     1             10000 Not r…\n 4 Germany        6.45e4             4          0     0              1000 Not r…\n 5 India          6.64e3             1          0     1              5000 Not r…\n 6 United States  6.5 e4             1          0     1                20 Not r…\n 7 United States  1.10e5            13          0     1                20 Not r…\n 8 Germany        5.38e4             4          1     0              5000 Not r…\n 9 United States  1.09e5             7          1     1                20 Not r…\n10 Germany        8.39e4            17          1     1                20 Not r…\n# ℹ 5,584 more rows\n# ℹ 14 more variables: CareerSatisfaction <int>, Data_scientist <dbl>,\n#   Database_administrator <dbl>, Desktop_applications_developer <dbl>,\n#   Developer_with_stats_math_background <dbl>, DevOps <dbl>,\n#   Embedded_developer <dbl>, Graphic_designer <dbl>,\n#   Graphics_programming <dbl>, Machine_learning_specialist <dbl>,\n#   Mobile_developer <dbl>, Quality_assurance_engineer <dbl>, …\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(stackoverflow)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Country\"                             \n [2] \"Salary\"                              \n [3] \"YearsCodedJob\"                       \n [4] \"OpenSource\"                          \n [5] \"Hobby\"                               \n [6] \"CompanySizeNumber\"                   \n [7] \"Remote\"                              \n [8] \"CareerSatisfaction\"                  \n [9] \"Data_scientist\"                      \n[10] \"Database_administrator\"              \n[11] \"Desktop_applications_developer\"      \n[12] \"Developer_with_stats_math_background\"\n[13] \"DevOps\"                              \n[14] \"Embedded_developer\"                  \n[15] \"Graphic_designer\"                    \n[16] \"Graphics_programming\"                \n[17] \"Machine_learning_specialist\"         \n[18] \"Mobile_developer\"                    \n[19] \"Quality_assurance_engineer\"          \n[20] \"Systems_administrator\"               \n[21] \"Web_developer\"                       \n```\n\n\n:::\n:::\n\n\nLet us now create a simple bar plot based on the variable \"Country\".\n\n## References\n\n1.  <https://posit.co/blog/introducing-gander/>\n2.  <https://simonpcouch.github.io/gander/>\n3.  \n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}